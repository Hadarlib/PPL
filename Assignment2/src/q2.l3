
(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res)
      (if (eq? (car res) "Ok")
        #t
        #f
      )
      #f
    )
  ) 
)

(define error?
  (lambda (res)
     (if (pair? res)
      (if (eq? (car res) "Failure")
        #t
        #f
      )
      #f
    )
  )
)

(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
)

(define result->val
  (lambda (res)
    (if (eq? (result? res) #t)
      (cdr res)
      res
    )
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if (ok? res)
        (f (result->val res))
        res
      )
    )
  )
)

(define make-dict
  (lambda ()
    '()
  )
)

(define dict?
  (lambda (e)
    (if (eq? e '())
      #t
      (if (not (pair? (car e)))
        #f
        (dict? (cdr e))
      )
    )
  )
)

(define get
  (lambda (dict k)
    (if (not (dict? dict))
      (make-error "Error: not a dictionary")
      (if (eq? dict '())
        (make-error "Key not found")
        (if (eq? (car (car dict)) k)
          (make-ok (cdr (car dict)))
          (get (cdr dict) k)
        )
      )
    )
  )
)



(define put
  (lambda (dict k v)
    (if (not (dict? dict))
      (make-error "Error: not a dictionary")
      (if(eq? dict '())
        (list (cons k v))
        (make-ok (cons (cons k v) (removePair k dict))))
    )
  )
)

(define removePair
  (lambda (x lst)
    (if (eq? lst '())
      lst
      (if (eq? (car (car lst)) x)
        (cdr lst)
        (cons (car lst) (removePair x (cdr lst)))
      )
    )
  )
)


(define map-dict
  (lambda (dict f)
    (if (not (dict? dict))
      (make-error "Error: not a dictionary")
      (make-ok (map f dict))
    )
  )
)
(define map
  (lambda (f lst)
    (if (empty? lst)
      '()
      (cons (cons (car (car lst))(f (cdr (car lst))))(map f (cdr lst)))
    )
  )
)



  


(define filter-dict
  (lambda (dict pred)
    (if (not (dict? dict))
      (make-error "Error: not a dictionary")
      (make-ok (filter pred dict))
    )
  )
)

(define filter
  (lambda (pred lst)
    (if (eq? lst '())
      '()
      (if (pred (car (car lst)) (cdr (car lst)))
        (cons (car lst) (filter pred (cdr lst)))
        (filter pred (cdr lst))
      )
    )
  )     
)


